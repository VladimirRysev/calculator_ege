// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200610201202_changeType")]
    partial class changeType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLayer.Models.EducationalDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetPlacesCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationalDivisionId")
                        .HasColumnType("int");

                    b.Property<int>("EducationalForm")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaidPlacesCount")
                        .HasColumnType("int");

                    b.Property<double>("PeriodOfStudy")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EducationalDivisionId");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("DataAccessLayer.Models.EducationalDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "Физика"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "Химия"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "Русский язык"
                        },
                        new
                        {
                            Id = 4,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "Математика(профильная)"
                        },
                        new
                        {
                            Id = 5,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "Биология"
                        },
                        new
                        {
                            Id = 6,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "Творческий конкурс"
                        },
                        new
                        {
                            Id = 7,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "Спортивная дисциплина"
                        },
                        new
                        {
                            Id = 8,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "География"
                        },
                        new
                        {
                            Id = 9,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "Обществознание"
                        },
                        new
                        {
                            Id = 10,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "Литература"
                        },
                        new
                        {
                            Id = 11,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "История"
                        },
                        new
                        {
                            Id = 12,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "Информатика"
                        },
                        new
                        {
                            Id = 13,
                            CreateDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            ModifiedDateTime = new DateTime(2020, 6, 10, 23, 12, 2, 337, DateTimeKind.Local).AddTicks(5630),
                            Name = "Иностранный язык"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.SubjectScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationalDirectionId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationalDirectionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectScores");
                });

            modelBuilder.Entity("DataAccessLayer.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePathInDirectory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Page")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("DataAccessLayer.Models.EducationalDirection", b =>
                {
                    b.HasOne("DataAccessLayer.Models.EducationalDivision", "EducationalDivision")
                        .WithMany("EducationalDirections")
                        .HasForeignKey("EducationalDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.EducationalDivision", b =>
                {
                    b.HasOne("DataAccessLayer.Models.University", "University")
                        .WithMany("Divisions")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.SubjectScore", b =>
                {
                    b.HasOne("DataAccessLayer.Models.EducationalDirection", "EducationalDirection")
                        .WithMany("SubjectScores")
                        .HasForeignKey("EducationalDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.Subject", "Subject")
                        .WithMany("SubjectScores")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
